/* soapESBServiceSoapProxy.cpp
   Generated by gSOAP 2.8.24 from ESBServiceWSDL.h

gSOAP XML Web services tools
Copyright (C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapESBServiceSoapProxy.h"

ESBServiceSoapProxy::ESBServiceSoapProxy() : soap(SOAP_IO_DEFAULT)
{	ESBServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ESBServiceSoapProxy::ESBServiceSoapProxy(const ESBServiceSoapProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

ESBServiceSoapProxy::ESBServiceSoapProxy(const struct soap &_soap) : soap(_soap)
{ }

ESBServiceSoapProxy::ESBServiceSoapProxy(const char *url) : soap(SOAP_IO_DEFAULT)
{	ESBServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

ESBServiceSoapProxy::ESBServiceSoapProxy(soap_mode iomode) : soap(iomode)
{	ESBServiceSoapProxy_init(iomode, iomode);
}

ESBServiceSoapProxy::ESBServiceSoapProxy(const char *url, soap_mode iomode) : soap(iomode)
{	ESBServiceSoapProxy_init(iomode, iomode);
	soap_endpoint = url;
}

ESBServiceSoapProxy::ESBServiceSoapProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	ESBServiceSoapProxy_init(imode, omode);
}

ESBServiceSoapProxy::~ESBServiceSoapProxy()
{
	this->destroy();
	}

void ESBServiceSoapProxy::ESBServiceSoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://tempuri.org/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

//#ifndef WITH_PURE_VIRTUAL
ESBServiceSoapProxy *ESBServiceSoapProxy::copy()
{	ESBServiceSoapProxy *dup = SOAP_NEW_COPY(ESBServiceSoapProxy(*(struct soap*)this));
	return dup;
}
//#endif

ESBServiceSoapProxy& ESBServiceSoapProxy::operator=(const ESBServiceSoapProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void ESBServiceSoapProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void ESBServiceSoapProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	ESBServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void ESBServiceSoapProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *ESBServiceSoapProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *ESBServiceSoapProxy::soap_fault()
{	return this->fault;
}

const char *ESBServiceSoapProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *ESBServiceSoapProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int ESBServiceSoapProxy::soap_close_socket()
{	return soap_closesock(this);
}

int ESBServiceSoapProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void ESBServiceSoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ESBServiceSoapProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *ESBServiceSoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int ESBServiceSoapProxy::ESBOperation(const char *endpoint, const char *soap_action, std::string session, std::string inputs, std::string &results)
{	struct soap *soap = this;
	struct __ns1__ESBOperation soap_tmp___ns1__ESBOperation;
	struct __ns1__ESBOperationResponse *soap_tmp___ns1__ESBOperationResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9000";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp___ns1__ESBOperation.session = session;
	soap_tmp___ns1__ESBOperation.inputs = inputs;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__ESBOperation(soap, &soap_tmp___ns1__ESBOperation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ESBOperation(soap, &soap_tmp___ns1__ESBOperation, "-ns1:ESBOperation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ESBOperation(soap, &soap_tmp___ns1__ESBOperation, "-ns1:ESBOperation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&results)
		return soap_closesock(soap);
	soap_default_std__string(soap, &results);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__ESBOperationResponse = soap_get___ns1__ESBOperationResponse(soap, NULL, "-ns1:ESBOperationResponse", NULL);
	if (!soap_tmp___ns1__ESBOperationResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	results = soap_tmp___ns1__ESBOperationResponse->results;
	return soap_closesock(soap);
}
/* End of client proxy code */
